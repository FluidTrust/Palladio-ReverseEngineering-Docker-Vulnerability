package org.palladiosimulator.pcm.confidentiality.reverseengineering.feature.staticcodeanalysis.parts;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.VulnerabilitySystemIntegration;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.impl.PCMElementImpl;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.impl.PcmIntegrationFactoryImpl;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.impl.VulnerabilitySystemIntegrationImpl;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.feature.staticcodeanalysisinterface.parts.interfaces.ICodeAnalysisResult;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.feature.staticcodeanalysisinterface.parts.interfaces.IStaticCodeAnalysisIssue;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.feature.staticcodeanalysisinterface.parts.interfaces.IStaticCodeAnalysisResult;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.feature.staticcodeanalysisinterface.parts.interfaces.IStaticCodeAnalyst;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.core.entity.Entity;
import org.palladiosimulator.pcm.repository.RepositoryComponent;

public class SnykCLIStaticCodeAnalyst implements IStaticCodeAnalyst {

	//For testing and development
	@SuppressWarnings("unused")
	private String fakeoutput = "Testing /home/lukas/git/sms/...\n"
			+ "\n"
			+ "Tested 44 dependencies for known issues, found 18 issues, 18 vulnerable paths.\n"
			+ "\n"
			+ "\n"
			+ "Issues with no direct upgrade or patch:\n"
			+ "  ✗ XML External Entity (XXE) Injection [High Severity][https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-1048302] in com.fasterxml.jackson.core:jackson-databind@2.10.0\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-actuator@2.2.0.RELEASE > org.springframework.boot:spring-boot-actuator-autoconfigure@2.2.0.RELEASE > com.fasterxml.jackson.core:jackson-databind@2.10.0\n"
			+ "  This issue was fixed in versions: 2.6.7.4, 2.9.10.7, 2.10.5.1\n"
			+ "  ✗ Information Exposure [Low Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHECOMMONS-559327] in org.apache.commons:commons-dbcp2@2.7.0\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.apache.commons:commons-dbcp2@2.7.0\n"
			+ "  No upgrade or patch available\n"
			+ "  ✗ HTTP Request Smuggling [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-1017119] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "  This issue was fixed in versions: 10.0.0-M8, 9.0.38, 8.5.5\n"
			+ "  ✗ Information Exposure [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-1048292] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "  This issue was fixed in versions: 8.5.60, 9.0.40, 10.0.0-M10\n"
			+ "  ✗ Information Disclosure [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-1061939] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "  This issue was fixed in versions: 10.0.0-M10, 9.0.40, 8.5.60, 7.0.107\n"
			+ "  ✗ Remote Code Execution (RCE) [High Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-1080637] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "  This issue was fixed in versions: 10.0.2, 9.0.43, 8.5.63, 7.0.108\n"
			+ "  ✗ HTTP Request Smuggling [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-1080638] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "  This issue was fixed in versions: 10.0.2, 9.0.43, 8.5.63\n"
			+ "  ✗ Session Fixation [Low Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-538488] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "  This issue was fixed in versions: 9.0.30, 8.5.50, 7.0.99\n"
			+ "  ✗ Privilege Escalation [High Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-538490] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "  This issue was fixed in versions: 9.0.29\n"
			+ "  ✗ Remote Code Execution (RCE) [High Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-570072] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "  This issue was fixed in versions: 10.0.0-M5, 9.0.35, 8.5.55, 7.0.104\n"
			+ "  ✗ Denial of Service (DoS) [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-584427] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
			+ "  This issue was fixed in versions: 10.0.0-M7, 9.0.37, 8.5.57\n"
			+ "  ✗ Cross-site Scripting (XSS) [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGHIBERNATEVALIDATOR-541187] in org.hibernate.validator:hibernate-validator@6.0.17.Final\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-validation@2.2.0.RELEASE > org.hibernate.validator:hibernate-validator@6.0.17.Final\n"
			+ "  This issue was fixed in versions: 6.0.18.Final, 6.1.0.Final\n"
			+ "  ✗ Improper Input Validation [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGHIBERNATEVALIDATOR-568163] in org.hibernate.validator:hibernate-validator@6.0.17.Final\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-validation@2.2.0.RELEASE > org.hibernate.validator:hibernate-validator@6.0.17.Final\n"
			+ "  This issue was fixed in versions: 6.0.19.Final, 6.1.3.Final\n"
			+ "  ✗ Improper Input Validation [High Severity][https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-1009832] in org.springframework:spring-web@5.2.0.RELEASE\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework:spring-web@5.2.0.RELEASE\n"
			+ "  This issue was fixed in versions: 4.3.29.RELEASE, 5.0.19.RELEASE, 5.1.18.RELEASE, 5.2.9.RELEASE\n"
			+ "  ✗ Privilege Escalation [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-1296829] in org.springframework:spring-web@5.2.0.RELEASE\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework:spring-web@5.2.0.RELEASE\n"
			+ "  This issue was fixed in versions: 5.3.7, 5.2.15.RELEASE\n"
			+ "  ✗ Reflected File Download (RFD) [High Severity][https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-559346] in org.springframework:spring-web@5.2.0.RELEASE\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework:spring-web@5.2.0.RELEASE\n"
			+ "  This issue was fixed in versions: 5.2.3, 5.1.13, 5.0.16\n"
			+ "  ✗ Cross-Site Request Forgery (CSRF) [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-542933] in org.springframework:spring-webmvc@5.2.0.RELEASE\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework:spring-webmvc@5.2.0.RELEASE\n"
			+ "  This issue was fixed in versions: 5.2.3\n"
			+ "  ✗ Denial of Service (DoS) [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGYAML-537645] in org.yaml:snakeyaml@1.25\n"
			+ "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-actuator@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter@2.2.0.RELEASE > org.yaml:snakeyaml@1.25\n"
			+ "  This issue was fixed in versions: 1.26";
	
	
	
	
	@Override
	public IStaticCodeAnalysisResult analyze(Map<Entity, List<String>> paths) {
		
		StaticCodeAnalyisResult result = null;
		
		for (Entity entity : paths.keySet()) {
			for (String path : paths.get(entity)) {
				if (path.endsWith("pom") && path.endsWith("dockerfile")) {
					
					String output = this.runCLICommand(path);
					result = this.parseSnykCLIOutput(output);
					this.annotateResultToEntity(entity, result);
					
				}
			}
		}
		
		return result;
	}
	
	/**
	 * Annotates a StaticCodeAnalyisResult to an Palladio Entity. Therefore the vulnerabilities of the result are looked up in Snyk's vulnerability database.
	 * The found results will be stored in Vulnerability objects that then will be annotated to the specified entity with the help of VulnerabilitySystemIntegrations
	 * @param entity the vulnerabilities will be annotated to
	 * @param result of a Snky analysis
	 */
	private void annotateResultToEntity(Entity entity, StaticCodeAnalyisResult result) {
		
		SnykVulnerabilityDatabase database = new SnykVulnerabilityDatabase(new SnykDatabaseParser());
		
		Vulnerability vul = null;
		
		try {
			for (IStaticCodeAnalysisIssue issue : result.getIssues()) {
				if (issue.getIdentifiers().containsKey("CWE")) {
						vul = database.getCWEVulnerability(new URI(issue.getUrl()));
				}
				else if (issue.getIdentifiers().containsKey("CVE")) {
					vul = database.getCVEVulnerability(new URI(issue.getUrl()));
				}
			}
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}			
		
		VulnerabilitySystemIntegrationImpl sysInteg = (VulnerabilitySystemIntegrationImpl) PcmIntegrationFactoryImpl.eINSTANCE.createVulnerabilitySystemIntegration();
		if (vul != null) {
			sysInteg.setVulnerability(vul);			
		}
		PCMElementImpl pcmElement = (PCMElementImpl) PcmIntegrationFactoryImpl.eINSTANCE.createPCMElement();
		
		if ((entity instanceof RepositoryComponent)) {
			pcmElement.setBasiccomponent((RepositoryComponent) entity);
		}
		else if (entity instanceof AssemblyContext) {
			pcmElement.setAssemblycontext((AssemblyContext)entity);
			
		}
		else throw new IllegalArgumentException("Please use RpositoryComponents or AssemblyContexts as arguments");
		
		sysInteg.setPcmelement(pcmElement);
		saveModel(sysInteg);
		
		
	}

	/**
	 * Takes a path and starts the Snyk CLI command for this path. 
	 * To run the command a process is build and started. The output is read with the help of a BufferedReader.
	 * The complete Snyk output will be returned.
	 * @param path that will be scanned from Snyk
	 * @return Snyk output
	 */
	private String runCLICommand(String path) {
		
		if ((new File(path)).exists()) {		
			ProcessBuilder processBuilder = new ProcessBuilder();
	        processBuilder.command("/bin/bash", "-c", "snyk test " + path);
	
	        try {
	
	            Process process = processBuilder.start();
	
	            BufferedReader reader =
	                    new BufferedReader(new InputStreamReader(process.getInputStream()));
	
	            String line;
	            StringBuilder sb = new StringBuilder();
	            while ((line = reader.readLine()) != null) {
	                System.out.println(line);
	                sb.append(line);
	            }
	
	            int exitCode = process.waitFor();
	            System.out.println("\nExited with error code : " + exitCode);
	            return sb.toString();
	
	        } catch (IOException e) {
	            e.printStackTrace();
	        } catch (InterruptedException e) {
	            e.printStackTrace();
	        }
		}
		else {
			System.out.println("File does not exist.");
		}
	
        return "";
	}
	
	//Declaring multiple patterns for RegEx search. All patterns are concatenated to one full pattern that is used to parse the Snyk output.
	private static String packagePattern = "(?<package>[a-zA-Z0-9\\.:@\\-]*)";	
	private static String issueNamePattern = "(?<name>[a-z A-Z\\(\\)]*)";
	private static String severityPattern = "\\[(?<severity>[a-z A-Z]*)\\]";
	private static String urlPattern = "\\[(?<url>(?:https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|])\\]";
	private static String fullOutputPattern = issueNamePattern + severityPattern + urlPattern + " in " + packagePattern;
	
	/**
	 * Takes Snyk CLI output and parses it. StaticCodeAnalysisResults will be built out of the parsed information.
	 * @param output of a Snyk CLI process
	 * @return StaticCodeAnalyisResult object containing all parsed data
	 */
	//Set pulbic for testing
	public StaticCodeAnalyisResult parseSnykCLIOutput(String output) {
		
		if(output == null || output.isEmpty()) return null;
		ArrayList<IStaticCodeAnalysisIssue> issues = new ArrayList<IStaticCodeAnalysisIssue>();
		
		//Possibility to scan for package manager
		String packetManager = null;
		
		//Snyk CLI lists the issues and uses the '\u2717' character as bullet points
		String[] issueStrings = output.split("\u2717");
	
		Pattern pattern = Pattern.compile(fullOutputPattern);
		
		//Start from index 1 to skip first non-issue String
		for(int i = 1; i < issueStrings.length; i++) {
			Matcher matcher = pattern.matcher(issueStrings[i]);
			if(matcher.find()) {
				SnykIssue issue = new SnykIssue(matcher.group("url"), matcher.group("name"), matcher.group("package"), matcher.group("severity"));	
				issues.add(issue);
			}
		}
		
		
		return new StaticCodeAnalyisResult(issues, packetManager);
	}
	
	/**
	 * Saving the specified model
	 * @param vul
	 */
	private void saveModel(VulnerabilitySystemIntegration vul) {

        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        Map<String, Object> m = reg.getExtensionToFactoryMap();
        m.put("vulnerabilitySystemIntegration", new XMIResourceFactoryImpl());

        // Obtain a new resource set
        ResourceSet resSet = new ResourceSetImpl();

        // create a resource
        //TODO Add Palladio Workflow (Jobs)
        Resource resource = resSet.createResource(org.eclipse.emf.common.util.URI
                .createURI("vulSysInteg/newVulSysInteg"));
       
        resource.getContents().add(vul);

        // now save the content.
        try {
            resource.save(Collections.EMPTY_MAP);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
	}

	@Override
	public IStaticCodeAnalysisResult analyze(String path) {
		// TODO Auto-generated method stub
		return null;
	}

}


