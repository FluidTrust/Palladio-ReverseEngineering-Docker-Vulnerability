package org.palladiosimulator.pcm.confidentiality.reverseengineering.feature.staticcodeanalysistest;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.junit.Test;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.feature.staticcodeanalysis.parts.SnykDatabaseParser;

public class SnykWebsiteParsingTest {

	private final String fakeOutput = "<div class=\"card card--sidebar\">\n"
			+ "\n"
			+ "\n"
			+ "  <div class=\"card__content\">\n"
			+ "<div class=\"cvss-breakdown\">\n"
			+ "    <header class=\"cvss-breakdown__header\">\n"
			+ "        <div>\n"
			+ "            <h2 class=\"cvss-breakdown__heading\">CVSS Score</h2>\n"
			+ "            <div class=\"cvss-breakdown__score cvss-breakdown__score--high\">8.0</div>\n"
			+ "        </div>\n"
			+ "        <div class=\"cvss-breakdown__labels\">\n"
			+ "            <div class=\"label label--high\">\n"
			+ "                <span class=\"label__text\">high severity</span>\n"
			+ "            </div>\n"
			+ "        </div>\n"
			+ "        <div class=\"cvss-breakdown__severity-bar cvss-breakdown__severity-bar--high\">\n"
			+ "            <span style=\"width: 80%\"></span>\n"
			+ "        </div>\n"
			+ "    </header>\n"
			+ "    <ul class=\"cvss-breakdown__items\">\n"
			+ "        <li class=\"cvss-breakdown__item\">\n"
			+ "        <div class=\"cvss-breakdown__title\">Attack Vector</div>\n"
			+ "        <div class=\"cvss-breakdown__desc\">Network</div>\n"
			+ "        </li>\n"
			+ "        <li class=\"cvss-breakdown__item\">\n"
			+ "        <div class=\"cvss-breakdown__title\">Attack Complexity</div>\n"
			+ "        <div class=\"cvss-breakdown__desc\">Low</div>\n"
			+ "        </li>\n"
			+ "        <li class=\"cvss-breakdown__item\">\n"
			+ "        <div class=\"cvss-breakdown__title\">Privileges Required</div>\n"
			+ "        <div class=\"cvss-breakdown__desc\">Low</div>\n"
			+ "        </li>\n"
			+ "        <li class=\"cvss-breakdown__item\">\n"
			+ "        <div class=\"cvss-breakdown__title\">User Interaction</div>\n"
			+ "        <div class=\"cvss-breakdown__desc\">Required</div>\n"
			+ "        </li>\n"
			+ "        <li class=\"cvss-breakdown__item\">\n"
			+ "        <div class=\"cvss-breakdown__title\">Scope</div>\n"
			+ "        <div class=\"cvss-breakdown__desc\">Unchanged</div>\n"
			+ "        </li>\n"
			+ "        <li class=\"cvss-breakdown__item\">\n"
			+ "        <div class=\"cvss-breakdown__title\">Confidentiality</div>\n"
			+ "        <div class=\"cvss-breakdown__desc\">High</div>\n"
			+ "        </li>\n"
			+ "        <li class=\"cvss-breakdown__item\">\n"
			+ "        <div class=\"cvss-breakdown__title\">Integrity</div>\n"
			+ "        <div class=\"cvss-breakdown__desc\">High</div>\n"
			+ "        </li>\n"
			+ "        <li class=\"cvss-breakdown__item\">\n"
			+ "        <div class=\"cvss-breakdown__title\">Availability</div>\n"
			+ "        <div class=\"cvss-breakdown__desc\">High</div>\n"
			+ "        </li>\n"
			+ "    </ul>\n"
			+ "    <footer class=\"cvss-breakdown__footer\">\n"
			+ "        <div class=\"cvss-breakdown__vector\">CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H</div>\n"
			+ "    </footer>\n"
			+ "</div>\n"
			+ "\n"
			+ "  </div>\n"
			+ "\n"
			+ "</div>";
	
	/**
	 * Tests if fakeoutput is still the same html dom structure as the actual live website.
	 */
	@Test
	void test_fakeOutput() {
		try {
			Document doc = Jsoup.connect("https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-1579721").get();
			assertEquals(doc.toString(), fakeOutput);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Tests if parsing is right.
	 */
	@Test
	void test_SnykWebsiteParsing() {
		SnykDatabaseParser parser =  new SnykDatabaseParser();
		Map<String, String> attributes = new HashMap<String, String>();
		attributes.put("Attack Vector", "Network");
		attributes.put("Privileges Required", "Low");
		attributes.put("Attack Complexity", "Low");
		attributes.put("User Interaction", "Required");
		attributes.put("Scope", "Unchanged");
		attributes.put("Confidentiality", "High");
		attributes.put("Integrity", "High");
		attributes.put("Availability", "High");
		Map<String, String> parsedAttributes = parser.parseAttributes(new Document(fakeOutput));
		
		for (String key : attributes.keySet()) {
			assertEquals(attributes.get(key), parsedAttributes.get(key));
		}
	}
	
}
