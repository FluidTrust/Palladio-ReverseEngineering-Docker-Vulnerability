package org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.parts;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSystemSpecificationContainer;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.impl.AttackerFactoryImpl;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.SystemIntegration;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.impl.PCMElementImpl;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.impl.PcmIntegrationFactoryImpl;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.impl.VulnerabilitySystemIntegrationImpl;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.iface.parts.interfaces.IStaticCodeAnalysisIssue;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.iface.parts.interfaces.IStaticCodeAnalysisResult;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.iface.parts.interfaces.IStaticCodeAnalyst;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.core.entity.Entity;
import org.palladiosimulator.pcm.repository.RepositoryComponent;
import org.palladiosimulator.pcm.system.impl.SystemImpl;

public class SnykCLIStaticCodeAnalyst implements IStaticCodeAnalyst {

    // For testing and development
    @SuppressWarnings("unused")
    private String fakeoutput = "Testing /home/lukas/git/sms/...\n" + "\n"
            + "Tested 44 dependencies for known issues, found 18 issues, 18 vulnerable paths.\n" + "\n" + "\n"
            + "Issues with no direct upgrade or patch:\n"
            + "  ✗ XML External Entity (XXE) Injection [High Severity][https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-1048302] in com.fasterxml.jackson.core:jackson-databind@2.10.0\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-actuator@2.2.0.RELEASE > org.springframework.boot:spring-boot-actuator-autoconfigure@2.2.0.RELEASE > com.fasterxml.jackson.core:jackson-databind@2.10.0\n"
            + "  This issue was fixed in versions: 2.6.7.4, 2.9.10.7, 2.10.5.1\n"
            + "  ✗ Information Exposure [Low Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHECOMMONS-559327] in org.apache.commons:commons-dbcp2@2.7.0\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.apache.commons:commons-dbcp2@2.7.0\n"
            + "  No upgrade or patch available\n"
            + "  ✗ HTTP Request Smuggling [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-1017119] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "  This issue was fixed in versions: 10.0.0-M8, 9.0.38, 8.5.5\n"
            + "  ✗ Information Exposure [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-1048292] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "  This issue was fixed in versions: 8.5.60, 9.0.40, 10.0.0-M10\n"
            + "  ✗ Information Disclosure [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-1061939] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "  This issue was fixed in versions: 10.0.0-M10, 9.0.40, 8.5.60, 7.0.107\n"
            + "  ✗ Remote Code Execution (RCE) [High Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-1080637] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "  This issue was fixed in versions: 10.0.2, 9.0.43, 8.5.63, 7.0.108\n"
            + "  ✗ HTTP Request Smuggling [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-1080638] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "  This issue was fixed in versions: 10.0.2, 9.0.43, 8.5.63\n"
            + "  ✗ Session Fixation [Low Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-538488] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "  This issue was fixed in versions: 9.0.30, 8.5.50, 7.0.99\n"
            + "  ✗ Privilege Escalation [High Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-538490] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "  This issue was fixed in versions: 9.0.29\n"
            + "  ✗ Remote Code Execution (RCE) [High Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-570072] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "  This issue was fixed in versions: 10.0.0-M5, 9.0.35, 8.5.55, 7.0.104\n"
            + "  ✗ Denial of Service (DoS) [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCATEMBED-584427] in org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-tomcat@2.2.0.RELEASE > org.apache.tomcat.embed:tomcat-embed-core@9.0.27\n"
            + "  This issue was fixed in versions: 10.0.0-M7, 9.0.37, 8.5.57\n"
            + "  ✗ Cross-site Scripting (XSS) [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGHIBERNATEVALIDATOR-541187] in org.hibernate.validator:hibernate-validator@6.0.17.Final\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-validation@2.2.0.RELEASE > org.hibernate.validator:hibernate-validator@6.0.17.Final\n"
            + "  This issue was fixed in versions: 6.0.18.Final, 6.1.0.Final\n"
            + "  ✗ Improper Input Validation [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGHIBERNATEVALIDATOR-568163] in org.hibernate.validator:hibernate-validator@6.0.17.Final\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-validation@2.2.0.RELEASE > org.hibernate.validator:hibernate-validator@6.0.17.Final\n"
            + "  This issue was fixed in versions: 6.0.19.Final, 6.1.3.Final\n"
            + "  ✗ Improper Input Validation [High Severity][https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-1009832] in org.springframework:spring-web@5.2.0.RELEASE\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework:spring-web@5.2.0.RELEASE\n"
            + "  This issue was fixed in versions: 4.3.29.RELEASE, 5.0.19.RELEASE, 5.1.18.RELEASE, 5.2.9.RELEASE\n"
            + "  ✗ Privilege Escalation [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-1296829] in org.springframework:spring-web@5.2.0.RELEASE\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework:spring-web@5.2.0.RELEASE\n"
            + "  This issue was fixed in versions: 5.3.7, 5.2.15.RELEASE\n"
            + "  ✗ Reflected File Download (RFD) [High Severity][https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-559346] in org.springframework:spring-web@5.2.0.RELEASE\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework:spring-web@5.2.0.RELEASE\n"
            + "  This issue was fixed in versions: 5.2.3, 5.1.13, 5.0.16\n"
            + "  ✗ Cross-Site Request Forgery (CSRF) [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-542933] in org.springframework:spring-webmvc@5.2.0.RELEASE\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-web@2.2.0.RELEASE > org.springframework:spring-webmvc@5.2.0.RELEASE\n"
            + "  This issue was fixed in versions: 5.2.3\n"
            + "  ✗ Denial of Service (DoS) [Medium Severity][https://snyk.io/vuln/SNYK-JAVA-ORGYAML-537645] in org.yaml:snakeyaml@1.25\n"
            + "    introduced by org.springframework.boot:smsApplication@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter-actuator@2.2.0.RELEASE > org.springframework.boot:spring-boot-starter@2.2.0.RELEASE > org.yaml:snakeyaml@1.25\n"
            + "  This issue was fixed in versions: 1.26";

    /**
     * The path to the snyk executable.
     */
    private Path snykLocation;

    /**
     * The path to the output directory.
     */
    private Path outputLocation;

    /**
     * Creates a SnykCLIStaticCodeAnalyst which will use the specified snyk executable.
     *
     * @param snykLocation
     *            a path to a snyk executable
     * @param outputLocation
     *            a path to the output directory
     */
    public SnykCLIStaticCodeAnalyst(Path snykLocation, Path outputLocation) {
        this.snykLocation = snykLocation;
        this.outputLocation = outputLocation;
    }

    @Override
    public IStaticCodeAnalysisResult analyze(Map<Entity, Set<Path>> entityPaths) {
        return analyze(entityPaths, true);
    }

    public IStaticCodeAnalysisResult analyze(Map<Entity, Set<Path>> entityPaths, boolean saveResult) {
        StaticCodeAnalyisResult result = null;

        for (Entity entity : entityPaths.keySet()) {
            Set<Path> paths = entityPaths.get(entity);
            for (Path path : paths) {
                if (path.getFileName()
                    .toString()
                    .equals("pom.xml")
                        || path.getFileName()
                            .toString()
                            .equals("Dockerfile")) {
                    String output = this.runCLICommand(path);
                    final StaticCodeAnalyisResult thisResult = this.parseSnykCLIOutput(output);
                    result = thisResult;
                    if (saveResult) {
                        AttackerSystemSpecificationContainer container = AttackerFactoryImpl.eINSTANCE
                            .createAttackerSystemSpecificationContainer();
                        // This is a writable list
                        List<SystemIntegration> systemIntegrations = (List<SystemIntegration>) container
                            .getVulnerabilities();
                        if (entity instanceof SystemImpl) {
                            ((SystemImpl) entity).getAssemblyContexts__ComposedStructure()
                                .forEach(x -> systemIntegrations.addAll(annotateResultToEntity(x, thisResult)));
                        } else {
                            systemIntegrations.addAll(annotateResultToEntity(entity, result));
                        }
                        // Use the name of the parent directory of the pom.xml/Dockerfile as
                        // identifier for the model file
                        saveModel(path.getParent()
                            .getFileName()
                            .toString(), container);
                    }
                }
            }
        }

        return result;
    }

    /**
     * Annotates a StaticCodeAnalyisResult to an Palladio Entity. Therefore the vulnerabilities of
     * the result are looked up in Snyk's vulnerability database. The found results will be stored
     * in Vulnerability objects that then will be annotated to the specified entity with the help of
     * VulnerabilitySystemIntegrations
     * 
     * @param entity
     *            the vulnerabilities will be annotated to
     * @param result
     *            of a Snyk analysis
     * @return the constructed VulnerabilitySystemIntegration
     */
    private List<VulnerabilitySystemIntegrationImpl> annotateResultToEntity(Entity entity,
            StaticCodeAnalyisResult result) {
        List<VulnerabilitySystemIntegrationImpl> sysIntegs = new ArrayList<>();
        for (var issue : result.getIssues()) {
            VulnerabilitySystemIntegrationImpl sysInteg = (VulnerabilitySystemIntegrationImpl) PcmIntegrationFactoryImpl.eINSTANCE
                .createVulnerabilitySystemIntegration();

            Vulnerability vul = getVulnerability(issue.getUrl());
            if (vul != null) {
                sysInteg.setVulnerability(vul);
            }
            PCMElementImpl pcmElement = (PCMElementImpl) PcmIntegrationFactoryImpl.eINSTANCE.createPCMElement();

            if ((entity instanceof RepositoryComponent)) {
                pcmElement.setBasiccomponent((RepositoryComponent) entity);
            } else if (entity instanceof AssemblyContext) {
                pcmElement.setAssemblycontext((AssemblyContext) entity);
            } else
                throw new IllegalArgumentException("Please use RepositoryComponents or AssemblyContexts as arguments");

            sysInteg.setPcmelement(pcmElement);
            sysIntegs.add(sysInteg);
        }
        return sysIntegs;
    }

    /**
     * Crawls the specified Snyk web site for the CWE and CVE identifiers of a vulnerability.
     * Then, if the vulnerability has a CWE identifier, it looks up the details of that and
     * returns a CWEVulnerability containing them. Otherwise, a CVE identifier is created and
     * returned.
     * 
     * @param url the URL of the Snyk web site for a vulnerability
     * @return the details of the vulnerability or {@code null} if no identifier could be found
     */
    private Vulnerability getVulnerability(String url) {
        // TODO implement
        return null;
    }

    /**
     * Takes a path and starts the Snyk CLI command for this path. To run the command a process is
     * build and started. The output is read with the help of a BufferedReader. The complete Snyk
     * output will be returned.
     * 
     * @param path
     *            that will be scanned from Snyk
     * @return Snyk output
     */
    private String runCLICommand(Path path) {
        if (path.toFile()
            .exists()) {
            ProcessBuilder processBuilder = new ProcessBuilder();
            processBuilder.directory(path.getParent()
                .toFile());
            processBuilder.command(snykLocation.toString(), "test", "--file=" + path);

            try {

                Process process = processBuilder.start();

                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

                String line;
                StringBuilder sb = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                    sb.append(line)
                        .append('\n');
                }

                int exitCode = process.waitFor();
                System.out.println("\nExited with error code : " + exitCode);
                return sb.toString();

            } catch (IOException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("File does not exist.");
        }

        return "";
    }

    // Declaring multiple patterns for RegEx search. All patterns are concatenated
    // to one full pattern that is used to parse the Snyk output.
    private static String packagePattern = "(?<package>[a-zA-Z0-9\\.:@\\-]*)";
    private static String issueNamePattern = "(?<name>[a-z A-Z\\(\\)]*)";
    private static String severityPattern = "\\[(?<severity>[a-z A-Z]*)\\]";
    private static String urlPattern = "\\[(?<url>(?:https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|])\\]";
    private static String fullOutputPattern = issueNamePattern + severityPattern + urlPattern + " in " + packagePattern;

    /**
     * Takes Snyk CLI output and parses it. StaticCodeAnalysisResults will be built out of the
     * parsed information.
     * 
     * @param output
     *            of a Snyk CLI process
     * @return StaticCodeAnalyisResult object containing all parsed data
     */
    // Set pulbic for testing
    public StaticCodeAnalyisResult parseSnykCLIOutput(String output) {
        ArrayList<IStaticCodeAnalysisIssue> issues = new ArrayList<>();

        // Possibility to scan for package manager
        String packetManager = null;

        if (output == null || output.isEmpty()) {
            return new StaticCodeAnalyisResult(issues, packetManager);
        }

        // Snyk CLI lists the issues and uses the '\u2717' character as bullet points
        // The console output is converted to UTF-8 to make sure the regex works.
        String[] issueStrings = new String(output.getBytes(), StandardCharsets.UTF_8).split("\\u2717");

        Pattern pattern = Pattern.compile(fullOutputPattern);

        // Start from index 1 to skip first non-issue String
        for (int i = 1; i < issueStrings.length; i++) {
            Matcher matcher = pattern.matcher(issueStrings[i]);
            if (matcher.find()) {
                SnykIssue issue = new SnykIssue(matcher.group("url"), matcher.group("name"), matcher.group("package"),
                        matcher.group("severity"));
                issues.add(issue);
            }
        }

        return new StaticCodeAnalyisResult(issues, packetManager);
    }

    /**
     * Saving the specified model with a name
     * 
     * @param name
     *            the name to include in the file name
     * @param model
     *            the model to save
     */
    private void saveModel(String name, AttackerSystemSpecificationContainer model) {

        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        Map<String, Object> m = reg.getExtensionToFactoryMap();
        m.put("vulnerabilitySystemIntegration", new XMIResourceFactoryImpl());

        // Obtain a new resource set
        ResourceSet resSet = new ResourceSetImpl();

        // create a resource
        // Note: this convoluted path conversion is for Windows machines
        Resource resource = resSet.createResource(org.eclipse.emf.common.util.URI
            .createURI(outputLocation.resolve("repository_" + name + ".vulnerabilitySystemIntegration")
                .toUri()
                .toString()));

        resource.getContents()
            .add(model);

        // now save the content.
        try {
            resource.save(Collections.emptyMap());
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    @Override
    public IStaticCodeAnalysisResult analyze(String path) {
        // TODO Auto-generated method stub
        return null;
    }

}
