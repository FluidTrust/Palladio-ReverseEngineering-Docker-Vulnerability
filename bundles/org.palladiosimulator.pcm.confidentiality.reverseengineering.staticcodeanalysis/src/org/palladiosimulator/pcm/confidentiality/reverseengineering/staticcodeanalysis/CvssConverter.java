package org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis;

import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AvailabilityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.IntegrityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Privileges;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV3X.AttackVectorType;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV3X.PrivilegesRequiredType;

/**
 * Utility class to convert from the NVD API CVSS objects to the attackSpecification CVSS
 * objects.
 * 
 * @see org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_api
 * @see org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification
 * 
 * @author Florian Bossert
 */
public class CvssConverter {
    private CvssConverter() {
        throw new IllegalStateException("This utility class should not be instantiated!");
    }

    public static ConfidentialityImpact toConfImpact(
            org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV3X.CiaType ciaType) {
        switch (ciaType) {
        case NONE:
            return ConfidentialityImpact.NONE;
        case HIGH:
            return ConfidentialityImpact.HIGH;
        case LOW:
            return ConfidentialityImpact.LOW;
        }
        return null;
    }

    public static ConfidentialityImpact toConfImpact(
            org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV20.CiaType ciaType) {
        switch (ciaType) {
        case NONE:
            return ConfidentialityImpact.NONE;
        case COMPLETE:
            return ConfidentialityImpact.HIGH;
        case PARTIAL:
            return ConfidentialityImpact.LOW;
        }
        return null;
    }

    public static IntegrityImpact toIntegImpact(
            org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV3X.CiaType ciaType) {
        switch (ciaType) {
        case NONE:
            return IntegrityImpact.NONE;
        case HIGH:
            return IntegrityImpact.HIGH;
        case LOW:
            return IntegrityImpact.LOW;
        }
        return null;
    }

    public static IntegrityImpact toIntegImpact(
            org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV20.CiaType ciaType) {
        switch (ciaType) {
        case NONE:
            return IntegrityImpact.NONE;
        case COMPLETE:
            return IntegrityImpact.HIGH;
        case PARTIAL:
            return IntegrityImpact.LOW;
        }
        return null;
    }

    public static AvailabilityImpact toAvailImpact(
            org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV3X.CiaType ciaType) {
        switch (ciaType) {
        case NONE:
            return AvailabilityImpact.NONE;
        case HIGH:
            return AvailabilityImpact.HIGH;
        case LOW:
            return AvailabilityImpact.LOW;
        }
        return null;
    }

    public static AvailabilityImpact toAvailImpact(
            org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV20.CiaType ciaType) {
        switch (ciaType) {
        case NONE:
            return AvailabilityImpact.NONE;
        case COMPLETE:
            return AvailabilityImpact.HIGH;
        case PARTIAL:
            return AvailabilityImpact.LOW;
        }
        return null;
    }

    public static AttackVector convert(AttackVectorType attackVector) {
        switch (attackVector) {
        case ADJACENT_NETWORK:
            return AttackVector.ADJACENT_NETWORK;
        case LOCAL:
            return AttackVector.LOCAL;
        case NETWORK:
            return AttackVector.NETWORK;
        case PHYSICAL:
            // Does not exist in the model.
            break;
        }
        return null;
    }

    public static Privileges convert(PrivilegesRequiredType privilegesRequired) {
        switch (privilegesRequired) {
        case HIGH:
            return Privileges.SPECIAL;
        case LOW:
            return Privileges.LOW;
        case NONE:
            return Privileges.NONE;
        }
        return null;
    }
}
