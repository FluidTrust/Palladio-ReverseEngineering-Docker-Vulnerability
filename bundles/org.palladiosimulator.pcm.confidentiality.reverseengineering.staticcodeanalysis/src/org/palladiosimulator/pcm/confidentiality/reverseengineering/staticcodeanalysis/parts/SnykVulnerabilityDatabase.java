package org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.parts;

import java.net.URI;
import java.util.Map;

import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AvailabilityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.CVEVulnerability;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.CWEVulnerability;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.IntegrityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Privileges;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.impl.AttackSpecificationFactoryImpl;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.impl.CVEVulnerabilityImpl;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.impl.CWEVulnerabilityImpl;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.iface.parts.interfaces.IVulnerabilityDatabase;

public class SnykVulnerabilityDatabase implements IVulnerabilityDatabase {

	SnykDatabaseParser parser;

	public SnykVulnerabilityDatabase(SnykDatabaseParser parser) {
		this.parser = parser;
	}

	@Override
	public CWEVulnerability getCWEVulnerability(URI path) {

		Map<String, String> vulnerabilityAttributes = parser.parseWebEntry(path.toString());

		CWEVulnerabilityImpl vulnerability = (CWEVulnerabilityImpl) AttackSpecificationFactoryImpl.eINSTANCE
				.createCWEVulnerability();
		vulnerability.setAttackVector(AttackVector.getByName(vulnerabilityAttributes.get("Attack Vector")));
		vulnerability.setPrivileges(Privileges.getByName(vulnerabilityAttributes.get("Privileges Required")));
		vulnerability.setConfidentialityImpact(
				ConfidentialityImpact.getByName(vulnerabilityAttributes.get("Confidentiality")));
		vulnerability.setIntegrityImpact(IntegrityImpact.getByName(vulnerabilityAttributes.get("Integrity")));
		vulnerability.setAvailabilityImpact(AvailabilityImpact.getByName(vulnerabilityAttributes.get("Availability")));

		return vulnerability;
	}

	@Override
	public CVEVulnerability getCVEVulnerability(URI path) {

		Map<String, String> vulnerabilityAttributes = parser.parseWebEntry(path.toString());

		CVEVulnerabilityImpl vulnerability = (CVEVulnerabilityImpl) AttackSpecificationFactoryImpl.eINSTANCE
				.createCVEVulnerability();
		vulnerability.setAttackVector(AttackVector.getByName(vulnerabilityAttributes.get("Attack Vector")));
		vulnerability.setPrivileges(Privileges.getByName(vulnerabilityAttributes.get("Privileges Required")));
		vulnerability.setConfidentialityImpact(
				ConfidentialityImpact.getByName(vulnerabilityAttributes.get("Confidentiality")));
		vulnerability.setIntegrityImpact(IntegrityImpact.getByName(vulnerabilityAttributes.get("Integrity")));
		vulnerability.setAvailabilityImpact(AvailabilityImpact.getByName(vulnerabilityAttributes.get("Availability")));

		return null;
	}

}
