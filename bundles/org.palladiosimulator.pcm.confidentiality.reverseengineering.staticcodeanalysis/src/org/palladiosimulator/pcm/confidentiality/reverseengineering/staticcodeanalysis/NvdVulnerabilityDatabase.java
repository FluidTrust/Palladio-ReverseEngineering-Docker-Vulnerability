package org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis;

import java.io.IOException;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.jsoup.Jsoup;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AvailabilityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.CVEID;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.CVEVulnerability;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.IntegrityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Privileges;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.impl.AttackSpecificationFactoryImpl;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.iface.IVulnerabilityDatabase;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.iface.VulnerabilityDatabaseException;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.BaseMetricV2;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.BaseMetricV3;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV20;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV3X;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.DefCveItem;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.NvdResponse;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;

public class NvdVulnerabilityDatabase implements IVulnerabilityDatabase {
    private static final Logger LOG = Logger.getLogger(NvdVulnerabilityDatabase.class);
    private static final String API_ENTRY_POINT = "https://services.nvd.nist.gov/rest/json/cve/1.0/";

    static {
        LOG.setLevel(Level.INFO);
    }

    @Override
    public CVEVulnerability getCVEVulnerability(String identifier) throws VulnerabilityDatabaseException {
        String url = API_ENTRY_POINT + identifier;
        String jsonResponse = null;
        try {
            jsonResponse = Jsoup.connect(url)
                .ignoreContentType(true)
                .get()
                .body()
                .text();
        } catch (IOException e) {
            throw new VulnerabilityDatabaseException("Could not contact NVD API!", e);
        }

        Gson gson = new Gson();
        NvdResponse response = null;
        try {
            response = gson.fromJson(jsonResponse, NvdResponse.class);
        } catch (JsonSyntaxException e) {
            throw new VulnerabilityDatabaseException("Could not process NVD API response!", e);
        }
        if (response.getResult()
            .getCVEItems()
            .isEmpty()) {
            throw new VulnerabilityDatabaseException("NVD API did not return any vulnerabilities!");
        }
        DefCveItem cveItem = response.getResult()
            .getCVEItems()
            .get(0);
        // The CVE ID directly from the database, to avoid inconsistencies
        String cveId = cveItem.getCve()
            .getCVEDataMeta()
            .getId();

        BaseMetricV3 baseMetricV3 = cveItem.getImpact()
            .getBaseMetricV3();
        if (baseMetricV3 != null) {
            LOG.info("Database processed CVSS3 for " + identifier);
            return createCVEVulnFromCVSS(cveId, baseMetricV3.getCvssV3());
        }

        BaseMetricV2 baseMetricV2 = cveItem.getImpact()
            .getBaseMetricV2();
        if (baseMetricV2 != null) {
            LOG.info("Database processed CVSS2 for " + identifier);
            return createCVEVulnFromCVSS(cveId, baseMetricV2.getCvssV2());
        }

        throw new VulnerabilityDatabaseException("Database did not return CVSS for the CVE!");
    }

    private CVEVulnerability createCVEVulnFromCVSS(String cveId, CvssV3X cvss) {
        CVEVulnerability vulnerability = AttackSpecificationFactoryImpl.eINSTANCE.createCVEVulnerability();
        setCveId(vulnerability, cveId);

        vulnerability.setAttackVector(AttackVector.getByName(cvss.getAttackVector()
            .name()));
        vulnerability.setPrivileges(Privileges.getByName(cvss.getPrivilegesRequired()
            .name()));
        vulnerability.setConfidentialityImpact(ConfidentialityImpact.getByName(cvss.getConfidentialityImpact()
            .name()));
        vulnerability.setIntegrityImpact(IntegrityImpact.getByName(cvss.getIntegrityImpact()
            .name()));
        vulnerability.setAvailabilityImpact(AvailabilityImpact.getByName(cvss.getAvailabilityImpact()
            .name()));
        return vulnerability;
    }

    private CVEVulnerability createCVEVulnFromCVSS(String cveId, CvssV20 cvss) {
        CVEVulnerability vulnerability = AttackSpecificationFactoryImpl.eINSTANCE.createCVEVulnerability();
        setCveId(vulnerability, cveId);
        
        vulnerability.setConfidentialityImpact(ConfidentialityImpact.getByName(cvss.getConfidentialityImpact()
            .name()));
        vulnerability.setIntegrityImpact(IntegrityImpact.getByName(cvss.getIntegrityImpact()
            .name()));
        vulnerability.setAvailabilityImpact(AvailabilityImpact.getByName(cvss.getAvailabilityImpact()
            .name()));
        return vulnerability;
    }
    
    private void setCveId(CVEVulnerability vulnerability, String cveId) {
        CVEID cveIdObj = AttackSpecificationFactoryImpl.eINSTANCE.createCVEID();

        cveIdObj.setEntityName(cveId);
        vulnerability.setEntityName(cveId);

        cveIdObj.setCveID(cveId);
        vulnerability.setCveID(cveIdObj);
    }
}
