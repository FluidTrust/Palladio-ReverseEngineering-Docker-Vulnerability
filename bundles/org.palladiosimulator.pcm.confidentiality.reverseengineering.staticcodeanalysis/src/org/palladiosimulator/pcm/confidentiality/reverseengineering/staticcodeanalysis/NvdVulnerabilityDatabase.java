package org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis;

import java.io.IOException;

import org.apache.log4j.Logger;
import org.jsoup.Jsoup;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AvailabilityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.CVEVulnerability;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.CWEVulnerability;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.IntegrityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Privileges;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.impl.AttackSpecificationFactoryImpl;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.iface.IVulnerabilityDatabase;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.iface.VulnerabilityDatabaseException;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.CvssV3X;
import org.palladiosimulator.pcm.confidentiality.reverseengineering.staticcodeanalysis.nvd_rest_api.NvdResponse;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;

public class NvdVulnerabilityDatabase implements IVulnerabilityDatabase {
    private static final Logger LOG = Logger.getLogger(NvdVulnerabilityDatabase.class);
    private static final String API_ENTRY_POINT = "https://services.nvd.nist.gov/rest/json/cve/1.0/";

    @Override
    public CWEVulnerability getCWEVulnerability(String identifier) throws VulnerabilityDatabaseException {
        throw new VulnerabilityDatabaseException("Fetching CWE vulnerabilities is currently not supported!");
    }

    @Override
    public CVEVulnerability getCVEVulnerability(String identifier) throws VulnerabilityDatabaseException {
        String url = API_ENTRY_POINT + identifier;
        String jsonResponse = null;
        try {
            jsonResponse = Jsoup.connect(url)
                .ignoreContentType(true)
                .get()
                .body()
                .text();
        } catch (IOException e) {
            throw new VulnerabilityDatabaseException("Could not contact NVD API!", e);
        }

        Gson gson = new Gson();
        NvdResponse response = null;
        try {
            response = gson.fromJson(jsonResponse, NvdResponse.class);
        } catch (JsonSyntaxException e) {
            throw new VulnerabilityDatabaseException("Could not process NVD API response!", e);
        }
        if (response.getResult().getCVEItems().isEmpty()) {
            throw new VulnerabilityDatabaseException(
                    "NVD API did not return any vulnerabilities!");
        }
        CvssV3X cvss = response.getResult()
            .getCVEItems()
            .get(0)
            .getImpact()
            .getBaseMetricV3()
            .getCvssV3();
        LOG.info("Database processed " + identifier);
        return createCVEVulnFromCVSS(cvss);
    }

    private CVEVulnerability createCVEVulnFromCVSS(CvssV3X cvss) {
        CVEVulnerability vulnerability = AttackSpecificationFactoryImpl.eINSTANCE.createCVEVulnerability();
        vulnerability.setAttackVector(AttackVector.getByName(cvss.getAttackVector()
            .name()));
        vulnerability.setPrivileges(Privileges.getByName(cvss.getPrivilegesRequired()
            .name()));
        vulnerability.setConfidentialityImpact(ConfidentialityImpact.getByName(cvss.getConfidentialityImpact()
            .name()));
        vulnerability.setIntegrityImpact(IntegrityImpact.getByName(cvss.getIntegrityImpact()
            .name()));
        vulnerability.setAvailabilityImpact(AvailabilityImpact.getByName(cvss.getAvailabilityImpact()
            .name()));
        return vulnerability;
    }

}
